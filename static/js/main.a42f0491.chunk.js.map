{"version":3,"sources":["features/search/Search.module.css","logo.svg","features/counter/Counter.module.css","features/counter/counterSlice.js","features/search/searchSlice.js","app/search_mockup.js","features/search/Search.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["module","exports","counterSlice","createSlice","name","initialState","value","reducers","increment","state","decrement","incrementByAmount","action","payload","actions","searchSlice","isSearching","areThereMore","currentPage","query","results","newResults","photos","appendResults","concat","startSearch","startAppend","setSearch","getResults","search","getAreThereMore","getQuery","getCurrentPage","data","src","tags","doesTagMatch","photoInfo","FuzzySet","get","searchPhotos","pageNumber","pageSize","allPhotos","filter","length","console","log","start","end","slice","Photo","props","className","styles","resultsPhoto","id","photoData","style","background","process","alt","Search","dispatch","useDispatch","photosFound","useSelector","lastQuery","type","placeholder","onChange","event","newSearch","target","map","onClick","getMore","App","configureStore","reducer","searchReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a42f0491.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"resultsPhoto\":\"Search_resultsPhoto__1OSxI\"};","module.exports = __webpack_public_path__ + \"static/media/logo.8dad8028.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"row\":\"Counter_row__38peh\",\"value\":\"Counter_value__1Fr8v\",\"button\":\"Counter_button__2Nigc\",\"textbox\":\"Counter_textbox__1Umhq\",\"asyncButton\":\"Counter_asyncButton__20hrp Counter_button__2Nigc\"};","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const counterSlice = createSlice({\r\n  name: 'counter',\r\n  initialState: {\r\n    value: 0,\r\n  },\r\n  reducers: {\r\n    increment: state => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.value += 1;\r\n    },\r\n    decrement: state => {\r\n      state.value -= 1;\r\n    },\r\n    incrementByAmount: (state, action) => {\r\n      state.value += action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\r\n\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched\r\nexport const incrementAsync = amount => dispatch => {\r\n  setTimeout(() => {\r\n    dispatch(incrementByAmount(amount));\r\n  }, 1000);\r\n};\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\r\nexport const selectCount = state => state.counter.value;\r\n\r\nexport default counterSlice.reducer;\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const searchSlice = createSlice({\r\n  name: 'search',\r\n  initialState: {\r\n    isSearching: false,\r\n    areThereMore: false,\r\n    currentPage: 1,\r\n    query: '',\r\n    results: []\r\n  },\r\n  reducers: {\r\n    newResults: (state, action) => {\r\n      state.results = action.payload.photos\r\n      state.areThereMore = action.payload.areThereMore\r\n      state.query = action.payload.query\r\n      state.isSearching = false\r\n      state.currentPage = 1\r\n    },\r\n    appendResults: (state, action) => {\r\n      state.results = state.results.concat(action.payload.photos)\r\n      state.areThereMore = action.payload.areThereMore\r\n      state.isSearching = false;\r\n      state.currentPage++;\r\n    },\r\n    startSearch: state => {\r\n      state.isSearching = true\r\n      state.results = []\r\n    },\r\n    startAppend: state => { isSearching = true},\r\n    setSearch: (state, action) => { state.query = action.payload }\r\n  },\r\n});\r\n\r\nexport const { newResults, appendResults, startSearch, startAppend } = searchSlice.actions;\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\r\nexport const getResults = state => state.search.results;\r\nexport const isSearching = state => state.search.isSearching;\r\nexport const getAreThereMore = state => state.search.areThereMore;\r\nexport const getQuery = state => state.search.query;\r\nexport const getCurrentPage = state => state.search.currentPage;\r\n\r\nexport default searchSlice.reducer;","import FuzzySet from 'fuzzyset.js'\r\n\r\nconst data = [\r\n  { \r\n    src: \"img/coons/photo_2020-10-29_09-29-07.jpg\",\r\n    tags: [\"raccoon\", \"animal\"],\r\n  },\r\n  { \r\n    src: \"img/coons/photo_2020-11-11_12-58-06.jpg\",\r\n    tags: [\"raccoon\", \"animal\"],\r\n  },\r\n  { \r\n    src: \"img/coons/photo_2020-10-31_14-14-37.jpg\",\r\n    tags: [\"raccoon\", \"animal\"],\r\n  },\r\n  { \r\n    src: \"img/coons/photo_2020-11-13_22-34-41.jpg\",\r\n    tags: [\"raccoon\", \"animal\"],\r\n  },\r\n  { \r\n    src: \"img/coons/photo_2020-11-06_11-25-26.jpg\",\r\n    tags: [\"raccoon\", \"animal\"],\r\n  },\r\n  { \r\n    src: \"img/coons/photo_2020-11-14_15-17-33.jpg\",\r\n    tags: [\"raccoon\", \"animal\"],\r\n  },\r\n  { \r\n    src: \"img/coons/photo_2020-11-06_23-10-35.jpg\",\r\n    tags: [\"raccoon\", \"animal\"],\r\n  },\r\n  { \r\n    src: \"img/coons/photo_2020-11-17_13-17-14.jpg\",\r\n    tags: [\"raccoon\", \"animal\"],\r\n  },\r\n  { \r\n    src: \"img/coons/photo_2020-11-11_12-57-54.jpg\",\r\n    tags: [\"raccoon\", \"animal\"],\r\n  },\r\n  {\r\n    src: \"img/frogs/photo_2020-11-05_11-46-58.jpg\",\r\n    tags: [\"frog\", \"animal\"]\r\n  },\r\n  {\r\n    src: \"img/frogs/photo_2020-11-18_19-20-40.jpg\",\r\n    tags: [\"frog\", \"animal\"]\r\n  },\r\n  {\r\n    src: \"img/frogs/photo_2020-11-14_19-33-01.jpg\",\r\n    tags: [\"frog\", \"animal\"]\r\n  },\r\n  {\r\n    src: \"img/frogs/photo_2020-11-18_19-20-43.jpg\",\r\n    tags: [\"frog\", \"animal\"]\r\n  },\r\n  {\r\n    src: \"img/frogs/photo_2020-11-18_19-20-37.jpg\",\r\n    tags: [\"frog\", \"animal\"]\r\n  },\r\n  {\r\n    src: \"img/frogs/photo_2020-11-18_19-20-47.jpg\",\r\n    tags: [\"frog\", \"animal\"]\r\n  },\r\n  {\r\n    src: \"img/frogs/photo_2020-11-18_19-20-39.jpg\",\r\n    tags: [\"frog\", \"animal\"]\r\n  },\r\n]\r\n\r\nfunction doesTagMatch(photoInfo, query) {\r\n  let tagsFuzzy = FuzzySet(photoInfo.tags)\r\n  let results = tagsFuzzy.get(query)\r\n  if (!results) return false;\r\n  let [[number]] = results;\r\n  return number > 0.7\r\n}\r\n\r\nexport function searchPhotos(query, pageNumber = 1, pageSize = 6) {\r\n  if (query == \"\") {\r\n    return {photos:[], areThereMore: false}\r\n  }\r\n\r\n  let allPhotos = data.filter(photoInfo => doesTagMatch(photoInfo, query))\r\n  if (allPhotos.length <= pageSize) {\r\n    console.log(\"returning all photos\")\r\n    return {photos: allPhotos, areThereMore: false};\r\n  }\r\n\r\n  let start = (pageNumber - 1)*pageSize;\r\n  let end = pageSize * pageNumber;\r\n  console.log(`returning from ${start} to ${end}`)\r\n  return {\r\n    photos: allPhotos.slice(start, end),\r\n    areThereMore: allPhotos.length > pageSize * pageNumber\r\n  }\r\n}","import React, { useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { newResults, getResults, getAreThereMore, startSearch, getCurrentPage, getQuery, startAppend, appendResults } from './searchSlice'\r\nimport { searchPhotos } from '../../app/search_mockup'\r\nimport styles from './Search.module.css';\r\n\r\nfunction Photo(props) {\r\n  return (\r\n    <div className={`col-4 ${styles.resultsPhoto}`}\r\n      id={props.photoData.src}>\r\n      <div style={{background: `url(${process.env.PUBLIC_URL + \"/\" + props.photoData.src}) no-repeat`}}\r\n      alt={`Photo ${props.photoData.src} not found`} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport function Search () {\r\n  const dispatch = useDispatch();\r\n  const photosFound = useSelector(getResults)\r\n  const areThereMore = useSelector(getAreThereMore)\r\n  const currentPage = useSelector(getCurrentPage)\r\n  const lastQuery = useSelector(getQuery)\r\n\r\n\r\n  function newSearch(query) {\r\n    dispatch(startSearch)\r\n    let results = searchPhotos(query);\r\n    results.query = query;\r\n    dispatch(newResults(results));\r\n  }\r\n\r\n  function getMore() {\r\n    dispatch(startAppend)\r\n    let results = searchPhotos(lastQuery, currentPage + 1);\r\n    dispatch(appendResults(results))\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h2 className=\"App-header\">Search</h2>\r\n      <input type=\"text\" className=\"App-wide-input\" placeholder=\"Search all photos (try with 'raccoon', 'animal', or 'frog')\"\r\n       onChange={event => newSearch(event.target.value)}></input>\r\n      <div className=\"row\">\r\n        {photosFound.map( data =>\r\n          (\r\n            <Photo photoData={data} />\r\n          )\r\n        )}\r\n      </div>\r\n      {areThereMore && \r\n      <button className=\"App-button\"\r\n        onClick={() => getMore()}>\r\n        SEE MORE\r\n      </button>}\r\n    </div>\r\n  )\r\n}","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport { Counter } from './features/counter/Counter';\r\nimport { Search } from './features/search/Search';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App container-sm\">\r\n        <Search />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport searchReducer from '../features/search/searchSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    search: searchReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}